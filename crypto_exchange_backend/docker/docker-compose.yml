version: '3.9'

services:

  nginx:
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 128M
    build:
      context: ../
      dockerfile: docker/nginx/Dockerfile
    restart: unless-stopped
    working_dir: /application
    volumes:
      - ../:/application
      - ../docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - ${NGINX_PROXY_HTTP_PORT}:80
    networks:
      - backend


  php-fpm:
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 128M
    build:
      context: ../
      dockerfile: docker/php-fpm/Dockerfile
    restart: unless-stopped
    working_dir: /application
    volumes:
      - ../:/application
      - ../docker/php-fpm/php-ini-overrides.ini:/etc/php/8.0/fpm/conf.d/99-overrides.ini
    networks:
      - backend
    links:
#      - postgres
      - redis

  redis:
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 512M
    image: redis:alpine
    restart: unless-stopped
    working_dir: /application
    volumes:
      - ./redis-data:/data
    ports:
      - ${REDIS_PORT}:6379
    networks:
      - backend


#  postgres:
#    image: postgres:13.2
#    working_dir: /application
#    volumes:
#      - ./postgres-data:/var/lib/postgresql/data
#      - ../:/application
#    environment:
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#      - POSTGRES_DB=${POSTGRES_DB}
#    restart: unless-stopped
#    ports:
#      - ${POSTGRES_PORT}:5432
#    networks:
#      - backend

  mysql:
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 512M
    image: mysql:8.0.23
    working_dir: /application
    restart: unless-stopped
    volumes:
      - ./mysql-data:/var/lib/mysql
      - ../:/application
      - ./mysql/init:/docker-entrypoint-initdb.d
    networks:
      - backend
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - ${MYSQL_PORT}:3306

  workers:
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 512M
    build:
      context: ../
      dockerfile: docker/workers/Dockerfile
    restart: unless-stopped
    volumes:
      - ../:/var/www/html
      - ../docker/php-fpm/php-ini-overrides.ini:/etc/php/8.0/fpm/conf.d/99-overrides.ini
      - ./workers/workers:/etc/supervisor/conf.d
    ports:
      - ${SUPERVISOR_PORT}:19477
    networks:
      - backend

  cron:
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 512M
    build:
      context: ../
      dockerfile: docker/php_cron/Dockerfile
    working_dir: /application
    restart: unless-stopped
    volumes:
      - ../:/application
    networks:
      - backend
    links:
#      - postgres
      - redis


  queue-worker:
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 128M
    build:
      context: ../
      dockerfile: docker/php-fpm/Dockerfile
    restart: unless-stopped
    working_dir: /application
    volumes:
      - ../:/application
      - ../docker/php_cli/php-ini-overrides.ini:/etc/php/8.0/cli/conf.d/99-overrides.ini
    command: [ "php", "artisan", "queue:listen", "--delay=0", "--tries=3" ]
    networks:
      - backend
    links:
#      - postgres
      - redis

#  web_app:
#    restart: unless-stopped
#    image: merehead/${COMPOSE_PROJECT_NAME}:web_app_${APP_IMAGES_BRANCH}
#    ports:
#      - ${WEB_APP_PORT:-8081}:80
#    links:
#      - 'nginx'
#    networks:
#      - backend

networks:
  backend:
    name: ${COMPOSE_PROJECT_NAME}_network
    driver: bridge


volumes:
#  postgres:
  mysql:
  redis:
