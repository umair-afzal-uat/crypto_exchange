pipeline {
    agent any
    environment {
        AWS_ECR_ACC = ""
		AWS_ECR_REG = ""
        JENKINS_ECR_CRED = ""
		PROJECT_NAME = ""
		DEPLOY_ENV = ""
        GIT_REPO_CRED = ""
		GIT_REPO_TO_BUILD =""
        GIT_BRANCH_TO_BUILD = ""
        SERVER_IP = ""
		PROJECT_DIR = ""
        CHAT_ID = 
		CHAT_MESSAGE = ""
        BOT_ID = ""
    }
    stages {

        stage('Clone repository') {
            steps {
                git branch: "${GIT_BRANCH_TO_BUILD}", url: "${GIT_REPO_TO_BUILD}", credentialsId: "${GIT_REPO_CRED}"
            }
        }
/*
        stage('Replace app config') {
            steps {
                echo 'Modifing app config ...'
                sh '''sed -i \"s/https:\\/\\/com\\/api/https:\\/\\/.corp.merehead.xyz\\/api/g\" ./services/api.js'''
                sh '''sed -i \"s/https:\\/\\/.corp.merehead.xyz\\/api/https:\\/\\/.corp.merehead.xyz\\/api/g\" ./services/api.js'''
			}
        }
*/
        stage('Build image') {
            steps {
                sh "docker build --build-arg APP_NAME=${PROJECT_NAME} -t ${AWS_ECR_ACC}.dkr.ecr.${AWS_ECR_REG}.amazonaws.com/${PROJECT_NAME}-${DEPLOY_ENV}:latest -f ./Dockerfile ."
            }
        }

        stage('Push image') {
            steps {
                script {
                        docker.withRegistry("https://${AWS_ECR_ACC}.dkr.ecr.${AWS_ECR_REG}.amazonaws.com", "ecr:${AWS_ECR_REG}:${JENKINS_ECR_CRED}") {
                        sh "docker push ${AWS_ECR_ACC}.dkr.ecr.${AWS_ECR_REG}.amazonaws.com/${PROJECT_NAME}-${DEPLOY_ENV}:latest"
                    }
                }
            }
        }

        stage('Get login in ECR registry') {
            steps {
                sh "ssh ubuntu@${SERVER_IP} 'sudo /home/ubuntu/bin/ecr_login.sh'"
            }
        }

        stage('Pull image and restart container') {
            steps {
                sh "ssh ubuntu@${SERVER_IP} 'cd ${PROJECT_DIR}; sudo make update'"
            }
        }

        stage('Telegram message') {
            steps {
                script {
    				final String url = "https://api.telegram.org/bot${BOT_ID}/sendMessage -d chat_id=${CHAT_ID} -d "

	    			final String message = "text=\"${CHAT_MESSAGE} completed SUCCESSFULLY\""

                    final String response = sh(script: "/usr/bin/curl -s -X POST $url $message", returnStdout: true).trim()

				echo response
				}
            }
        }
    }

    post {
         always {
             echo 'This will always run'
         }
         success {
             echo 'This will run only if successful'
         }
         failure {
                script {
					sh """
						log_file_name=${JENKINS_HOME}/jobs/${JOB_NAME}/builds/${BUILD_NUMBER}/log
						loglastline=`awk '/skipped due to earlier failure/{ print NR; exit }' \$log_file_name`
						logstartline=`awk '/docker build/{ print NR; exit }' \$log_file_name` 
						if [ ! -n \"\$logstartline\" ]
						then 
							logstartline=1
						fi
						loglength=\$((loglastline-logstartline))
						tail --lines=+\$logstartline \$log_file_name |head -n \$loglength| perl -p -e 's/\\n/\\r\\n/' > ${GIT_COMMIT}.txt
					"""

    				final String url = "https://api.telegram.org/bot${BOT_ID}/sendMessage -d chat_id=${CHAT_ID} -d "

	    			final String message = "text=\"${CHAT_MESSAGE} completed with ERROR\""

                    final String response = sh(script: "/usr/bin/curl -s -X POST $url $message", returnStdout: true).trim()

				echo response

					final String file_response = sh(script: "/usr/bin/curl -F document=@\"${GIT_COMMIT}.txt\" https://api.telegram.org/bot${BOT_ID}/sendDocument?chat_id=${CHAT_ID}", returnStdout: true).trim()

			    echo file_response

					sh(script: "/bin/rm -f ${GIT_COMMIT}.txt")

				}
         }
         unstable {
             echo 'This will run only if the run was marked as unstable'
         }
         changed {
             echo 'This will run only if the state of the Pipeline has changed'
             echo 'For example, if the Pipeline was previously failing but is now successful'
         }
     }
}
